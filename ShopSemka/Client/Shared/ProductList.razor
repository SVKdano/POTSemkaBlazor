@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span> Načítavanie produktov...</span>
}
else
{
    <h3 class="nadpis">Produkty</h3>
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2" style="margin-right:2%">
                    <a href="/product/@product.Id">
                        <img class="media-img"
                             src="@product.ImageURL"
                             alt="@product.Title"
                             style="width:250px"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                </div>
            </li>
        }
    </ul>
}

@code {
    protected override void OnInitialized()
    {
        //Ak je zmenený component rerenderujem ho
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        //UNsubscribe
        ProductService.ProductsChanged -= StateHasChanged;
    }

}
    
   

